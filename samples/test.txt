/*
    This file is an example of the unilang syntax.
    This multi-line comment is allowed in unilang files.
    // Test
*/

print "Hello" // >> Hello
printl ", World!" // >> Hello, World!\n
println "Hello, World!" // >> Hello, World!\n // Same as printl "Hello, World!"
printl "This is a more complicated string with nested '\"' characters in it '\"'."
printl 'This is another way to use strings with non escaped double quotes (") in it.'
printl "You can concatenate strings" + " using the + operator" + ", it's easy..."
printl "You can print any positive integer: " + 42
printl "As well as any other expr: " + (- 42 - 64 + 128) // >> As well as any other expr: 22\n
printl "Careful with this: " + - 42 - 64 + 128 // >> Careful with this: -42-64128\n
printl 11 + -42 + 10 + " also works!" // >> -21 also works!\n
printl "And if you try that: " + 64 + 10 + " this won't compute 64 + 10 but concatenate strings!"

/* Yet another comment randomly placed in the code */
/*
    And another one,
    spanning multiple lines
    this time.
*/

bool = false
bool = true
bool = 2 < -4
bool = 2 < -4
bool = 2 =< -4
bool = 2 >= -4 == 4 && false || true

list = []
list = [0, 1, 2.4, 3]
list = [0..3] // list = [0, 1, 2, 3]
list = [3..0] // list = [3, 2, 1, 0]
list = [0..3, 4, 7.3, 3..0, 2] // list = [0, 1, 2, 3, 4, 7.3, 3, 2, 1, 0, 2]
list = list + [0, 1, 0..2] // list = [0, 1, 2, 3, 4, 7.3, 3, 2, 1, 0, 2, 0, 1, 0, 1, 2]
list = list - [0..2] // list = [3, 4, 7.3, 3]
list = list * 2 // list = [3, 4, 7.3, 3, 3, 4, 7.3, 3]
list += [0, 1, 0..2] // list = [3, 4, 7.3, 3, 0, 1, 0, 1, 2]
list += [0, 1, 2] + [0, 2] // list = [3, 4, 7.3, 3, 0, 1, 0, 1, 2, 0, 1, 2, 0, 2]
list -= [1..3, 7] // list = [4, 0, 0, 0, 0]
list -= [1..4] - [4] + [0] // list = [4, 0, 0, 0, 0] - ([1, 2, 3, 4] - [4] + [0]) = [4, 0, 0, 0, 0] - [1, 2, 3, 0] = [4]
list *= 3 // list = [4, 4, 4]
list += [0..2] * 2 // list = [4, 4, 4, 0, 1, 2, 0, 1, 2]
list = [list.[5], list.[0], 2..4] // list = [2, 4, 2, 3, 4]
list = list.[1..3] // list = [4, 2, 3]
list = [0, 1, 2, 3] + [3, 2, 1, 0].[0..2].[1..2] // list = [0, 1, 2, 3] + [3, 2, 1].[1..2] = [0, 1, 2, 3] + [2, 1] = [0, 1, 2, 3, 2, 1]
list = [0, 1, 2, 3] + [3, 2, 1, 0].[0..2].[1..2] + [0..10].[2] // list = [0, 1, 2, 3] + [3, 2, 1].[1..2] = [0, 1, 2, 3] + [2, 1] = [0, 1, 2, 3, 2, 1]
list = [0, 1, 2, 3] + [3, 2, 1, 0].([0..2].[1..2] + [0..10]).[2] // list = [0, 1, 2, 3] + [3, 2, 1].[1..2] = [0, 1, 2, 3] + [2, 1] = [0, 1, 2, 3, 2, 1]
list = list.[2, 4..6] // list = [2, 4, -3, 0] // computes the sublist composed of the elements at index 2, 4, 5 and 6 in list "list"
list = [0, 1, 2, 42, 3, 4, 5] <- 4 // list = [3, 4, 5, 0, 1, 2, 42] // shifts elements in the list 4 times to the left
list = [0, 1, 2, 42, 3, 4, 5] <-4 // might be ambiguous with "x < -4" so "<-" should be considered as an operator
list = [0, 1, 2, 42, 3, 4, 5] -> 2 // list = [4, 5, 0, 1, 2, 42, 3] // shifts elements in the list 2 times to the right
list = <->[0, 1, 2, 42, 3, 4, 5] // list = [5, 4, 3, 42, 2, 1, 0] // reverses the list
list = <~>list // shuffles the list
list = [#list..0, 4, 5] // list = [7..0, 4, 5] = [7, 6, 5, 4, 3, 2, 1, 0, 4, 5] // |list| gives the size of the list
list = [0, 1, 2, 3] * [3..0] // list = [0, 1, 2, 3] * [3, 2, 1, 0] = [(0, 3), ..., (0, 0), (1, 3), ..., (1, 0), (2, 3), ..., (2, 0), (3, 3), ..., (3, 0)] // computes the cartesian product
list = [0, 1] ** 3 // list = [0, 1] * [0, 1] * [0, 1] = [(0, 0, 0), (0, 0, 1), ..., (1, 1, 1)]
list = [0, 1] * 2 * 3 // list = [0, 1, 0, 1] * 3 = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
list = [(-2)..3 + -(2 - 2)] + [-4..-6] // list = [-2, -1, 0, 1, 2, 3, -4, -5, -6]
list = <~><->list.[0, #list - 1]
list = [false, true, 0 > 0, 0, 1, 2, 3, "a", "bc", "cde", 3.4, 2.5, 3.14, [0], [1], [2, 3]]

set = {0, 1, 2, 3, 2, 1, 0, 4} // set = {0, 1, 2, 3, 4}
set = {0, 1, 2, 3} | {0..5, 6, 3} & {2..4} // set = {0, 1, 2, 3, 4, 5, 6} & {2..8} = [2, 3, 4, 5, 6] // computes the union (|) and the intersection (&) between two sets

bool = 3 : {0..3} // bool = true

val = 4 | #[3, 4, 5, 6, 7].[0..2] | 3 // val = 4 | #[3, 4, 5] | 3 // val = 4 | 3 | 3 = 7

tuple = (0, 2)
tuple = ((0, 1), tuple, (0, 2))

/*
// The following notation allows to access elements in pairs by index
list[4] = list[1][1] * list[0][0] // list = [(0, 3), (1, 3), null, null, 3 * 0] = [(0, 3), (1, 3), null, null, 0]
// The following notation allows to filter a list based on pattern matching and predicate evaluation
list = list.[$(a, b)$: left =< 1 && right > 2, $?bool?$: !bool, $#integer#$: integer < 2, $.double.$: double + 3 > 6, $"string"$: |string| == 2]
*/
